import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "kotlin-parcelize"
apply plugin: "dagger.hilt.android.plugin"

apply plugin: 'io.gitlab.arturbosch.detekt'


android {
    compileSdk 31

    defaultConfig {
        applicationId "com.projectdelta.chopper"
        minSdk 28
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17 -Ofast -g0' // https://github.com/bytedeco/javacpp/issues/287
                arguments "-DANDROID_STL=c++_shared", "-DCMAKE_BUILD_TYPE=Release"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    // hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    kapt("com.google.dagger:dagger-compiler:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
    implementation("androidx.hilt:hilt-work:1.0.0")
    kapt("androidx.hilt:hilt-compiler:1.0.0")

    // glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // logging
    implementation 'com.jakewharton.timber:timber:5.0.1'

    def lifecycle_ver = "2.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ver"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_ver"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_ver"

    // datastore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // animations
    implementation 'com.airbnb.android:lottie:4.2.1'

    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'

}


tasks.named("detekt").configure {
    reports {
        xml.required.set(false)
        xml.outputLocation.set(file("build/reports/detekt.xml"))
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt.html"))
        txt.required.set(false)
        sarif.required.set(true)
        sarif.outputLocation.set(file("build/reports/detekt.sarif"))
    }
}

detekt {
    toolVersion = detekt_version
    config = files("$rootDir/config/detekt/detekt.yml")
    buildUponDefaultConfig = true
    parallel = true
}

def osxDir = projectDir.absolutePath + '/.externalNativeBuild/cmake/debug/osx/'

task createBuildDir() {
    def folder = new File(osxDir)
    if (!folder.exists()) {
        folder.mkdirs()
    }
}

task runCMake(type: Exec) {
    dependsOn createBuildDir
    workingDir osxDir // Jump to future build directory
    commandLine '/usr/local/bin/cmake' // Path from HomeBrew installation
    args projectDir.absolutePath+'/src/main/cpp/' // Relative path for out-of-source builds
}

task runMake(type: Exec) {
    dependsOn runCMake
    workingDir osxDir
    commandLine 'make'
}

// https://sureshjoshi.com/mobile/android-junit-native-libraries
//project.afterEvaluate {
//    // Not sure how much of a hack this is - but it allows CMake/SWIG to run before Android Studio
//    // complains about missing generated files
//    // TODO: Probably need a release hook too?
//    javaPreCompileDebug.dependsOn externalNativeBuildDebug
//    if (OperatingSystem.current().isMacOsX()) {
//        javaPreCompileDebugAndroidTest.dependsOn runMake
//    }
//}
